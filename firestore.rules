rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users collection rules
    match /users/{userId} {
      // Users can read their own document and other users' basic info
      allow read: if request.auth != null;
      
      // Users can only write to their own document
      allow write: if request.auth != null && request.auth.uid == userId;
      
      // Allow creation of user document during signup
      allow create: if request.auth != null && request.auth.uid == userId;
    }
    
    // Chats collection rules
    match /chats/{chatId} {
      // Only participants can read/write chat documents
      allow read, write: if request.auth != null && 
        request.auth.uid in resource.data.participants;
      
      // Allow creation if the creator is in participants
      allow create: if request.auth != null && 
        request.auth.uid in request.resource.data.participants;
      
      // Messages subcollection within chats
      match /messages/{messageId} {
        // Only chat participants can read messages
        allow read: if request.auth != null && 
          request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
        
        // Only authenticated users who are participants can create messages
        allow create: if request.auth != null && 
          request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants &&
          request.auth.uid == request.resource.data.senderId;
        
        // Prevent editing or deleting messages
        allow update, delete: if false;
      }
    }
    
    // Presence collection for tracking online status
    match /presence/{userId} {
      // Users can read any presence document
      allow read: if request.auth != null;
      
      // Users can only write to their own presence document
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Contact requests collection
    match /contactRequests/{requestId} {
      // Users can read requests where they are sender or receiver
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.senderId || 
         request.auth.uid == resource.data.receiverId);
      
      // Users can create requests as sender
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.senderId;
      
      // Users can update requests where they are receiver (to accept/decline)
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.receiverId;
      
      // Only sender can delete their own requests
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.senderId;
    }
    
    // Chat invites collection
    match /chatInvites/{inviteId} {
      // Users can read invites where they are involved
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.senderId || 
         request.auth.uid == resource.data.receiverId);
      
      // Users can create invites as sender
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.senderId;
      
      // Users can update invites where they are receiver
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.receiverId;
      
      // Only sender can delete their invites
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.senderId;
    }
    
    // File uploads collection
    match /uploads/{uploadId} {
      // Users can read uploads in chats they participate in
      allow read: if request.auth != null && 
        request.auth.uid in get(/databases/$(database)/documents/chats/$(resource.data.chatId)).data.participants;
      
      // Users can create uploads
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.uploaderId;
      
      // Prevent editing uploads
      allow update, delete: if false;
    }
    
    // Typing indicators collection
    match /typing/{chatId} {
      // All chat participants can read typing indicators
      allow read: if request.auth != null && 
        request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
      
      // Users can write their own typing status
      allow write: if request.auth != null && 
        request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
    }
    
    // Deny all other requests
    match /{document=**} {
      allow read, write: if false;
    }
  }
}